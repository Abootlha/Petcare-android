package com.example.petproject

import android.os.Bundle
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.example.petproject.models.Pet
import com.example.petproject.repositories.PetRepository
import com.google.android.material.textfield.TextInputEditText
import kotlinx.coroutines.launch

class AddPetActivity : AppCompatActivity() {
    private lateinit var nameEditText: TextInputEditText
    private lateinit var typeEditText: TextInputEditText
    private lateinit var breedEditText: TextInputEditText
    private lateinit var ageEditText: TextInputEditText
    private lateinit var genderEditText: TextInputEditText
    private lateinit var descriptionEditText: TextInputEditText
    private lateinit var imageUrlEditText: TextInputEditText
    private lateinit var priceEditText: TextInputEditText
    private lateinit var addButton: Button
    private val petRepository = PetRepository()
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_add_pet)
        
        title = "Add New Pet"
        
        // Initialize views
        nameEditText = findViewById(R.id.editTextPetName)
        typeEditText = findViewById(R.id.editTextPetType)
        breedEditText = findViewById(R.id.editTextPetBreed)
        ageEditText = findViewById(R.id.editTextPetAge)
        genderEditText = findViewById(R.id.editTextPetGender)
        descriptionEditText = findViewById(R.id.editTextPetDescription)
        imageUrlEditText = findViewById(R.id.editTextPetImageUrl)
        priceEditText = findViewById(R.id.editTextPetPrice)
        addButton = findViewById(R.id.buttonAddPet)
        
        // Set up button click listener
        addButton.setOnClickListener {
            if (validateInputs()) {
                addPet()
            }
        }
    }
    
    private fun validateInputs(): Boolean {
        var isValid = true
        
        val name = nameEditText.text.toString().trim()
        val type = typeEditText.text.toString().trim()
        val breed = breedEditText.text.toString().trim()
        val ageStr = ageEditText.text.toString().trim()
        val gender = genderEditText.text.toString().trim()
        val description = descriptionEditText.text.toString().trim()
        val priceStr = priceEditText.text.toString().trim()
        
        if (name.isEmpty()) {
            nameEditText.error = "Name is required"
            isValid = false
        }
        
        if (type.isEmpty()) {
            typeEditText.error = "Type is required"
            isValid = false
        }
        
        if (breed.isEmpty()) {
            breedEditText.error = "Breed is required"
            isValid = false
        }
        
        if (ageStr.isEmpty()) {
            ageEditText.error = "Age is required"
            isValid = false
        }
        
        if (gender.isEmpty()) {
            genderEditText.error = "Gender is required"
            isValid = false
        }
        
        if (description.isEmpty()) {
            descriptionEditText.error = "Description is required"
            isValid = false
        }
        
        if (priceStr.isEmpty()) {
            priceEditText.error = "Price is required"
            isValid = false
        }
        
        return isValid
    }
    
    private fun addPet() {
        val name = nameEditText.text.toString().trim()
        val type = typeEditText.text.toString().trim()
        val breed = breedEditText.text.toString().trim()
        val age = ageEditText.text.toString().toInt()
        val gender = genderEditText.text.toString().trim()
        val description = descriptionEditText.text.toString().trim()
        val imageUrl = imageUrlEditText.text.toString().trim()
        val price = priceEditText.text.toString().toDoubleOrNull() ?: 0.0
        
        // Create a new Pet object
        val newPet = Pet(
            id = "", // ID will be generated by the backend
            name = name,
            type = type,
            breed = breed,
            age = age,
            gender = gender,
            description = description,
            imageUrl = imageUrl,
            price = price,
            ownerId = "", // Will be set by the backend
            ownerName = "", // Will be set by the backend
            ownerContact = "", // Will be set by the backend
            isAdopted = false
        )
        
        // Show loading state
        addButton.isEnabled = false
        addButton.text = "Adding..."
        
        // Add pet to repository
        lifecycleScope.launch {
            try {
                val result = petRepository.addPet(newPet)
                
                if (result.isSuccess) {
                    Toast.makeText(this@AddPetActivity, "Pet added successfully", Toast.LENGTH_SHORT).show()
                    finish() // Close activity and return to previous screen
                } else {
                    val exception = result.exceptionOrNull()
                    Toast.makeText(this@AddPetActivity, "Error: ${exception?.message}", Toast.LENGTH_SHORT).show()
                    // Reset button state
                    addButton.isEnabled = true
                    addButton.text = "Add Pet"
                }
            } catch (e: Exception) {
                Toast.makeText(this@AddPetActivity, "Error: ${e.message}", Toast.LENGTH_SHORT).show()
                // Reset button state
                addButton.isEnabled = true
                addButton.text = "Add Pet"
            }
        }
    }
}